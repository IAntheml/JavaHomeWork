public ApiResult startRrmOptimize(ProjectVO vo, Context context) {
        logger.debug("startRrm " + vo.getProjectId());
        //将射频调优参数读出来
        RadioOptimizeInfo radioOptimizeInfo = radioOptimizeParamsDao.findByProjectId(vo.getProjectId());
        if (radioOptimizeInfo == null) {
            //如果没有射频调优参数
            return new ApiResult(Errors.INVALID_PARAMS, "do not have params for radio optimize");
        }
        //获取该项目下所有的设备
        List<Device> projectDevices = deviceRepository.findAllBySiteIdAndBelongDeviceIsNull(vo.getProjectId());
        if (projectDevices == null) {
            return new ApiResult(Errors.SUCCESS);
        }
        List<Device> projectDevicesSupportRrm = new ArrayList<>();
        for (Device device : projectDevices) {
            //筛选出支持射频调优的设备
            int deviceFeature = DeviceRedissonApi.getInstance().getDeviceFeature(vo.getProjectId(), device.getDeviceMac());
            if (DeviceApi.supportFeature(deviceFeature, DeviceFeature.supportRrm)) {
                logger.debug("device support rrm,mac is : " + device.getDeviceMac());
                projectDevicesSupportRrm.add(device);
            }
        }
        //如果没有支持射频调优的设备
        if (CollectionUtils.isEmpty(projectDevicesSupportRrm)) {
            //当前项目中，没有设备支持射频调优
            return new ApiResult(NOT_DEVICE_SUPPORT_RRM_ERROR_CODE, "project dose not have device supports rrm");
        }
        List<Long> devicesIndexes = new ArrayList<>();
        for (Device device : projectDevicesSupportRrm) {
            List<Device> subDevices = deviceRepository.findAllBySiteIdAndBelongDevice(vo.getProjectId(), device.getId());
            for (Device subDevice : subDevices){
                devicesIndexes.add(subDevice.getId());
            }
        }
        if (CollectionUtils.isEmpty(devicesIndexes)) {
            //当前项目中，没有AP设备支持射频调优
            return new ApiResult(NOT_DEVICE_SUPPORT_RRM_ERROR_CODE, "project dose not have ap device supports rrm");
        }
        RadioOptimizeHistory history = optimizeHistoryDao.findFirstByProjectIdOrderByOptimizeTimeDesc(vo.getProjectId());
        if (history == null){
            if (isProjectRadioOptimizing(vo.getProjectId())){
                return new ApiResult(Errors.SUCCESS, new StartRrmVO(RadioOptimizeStatus.UNDERWAY.toString(),
                        history.getOptimizeResultId()));
            }
        }else {
            if (RadioOptimizeStatus.UNDERWAY.toString().equals(history.getOptimizeStatus())){
                if (isProjectRadioOptimizing(vo.getProjectId())){
                    return new ApiResult(Errors.SUCCESS, new StartRrmVO(RadioOptimizeStatus.UNDERWAY.toString(),
                            history.getOptimizeResultId()));
                }else {
                    logger.debug("redis have no rrm message but mysql has");
                    history.setOptimizeStatus(RadioOptimizeStatus.FINISH.toString());
                    optimizeHistoryDao.save(history);
                }
            }else {
                if (isProjectRadioOptimizing(vo.getProjectId())){
                    return new ApiResult(Errors.SUCCESS, new StartRrmVO(RadioOptimizeStatus.UNDERWAY.toString(),
                            history.getOptimizeResultId()));
                }
            }
        }
        String optimizeResultId = UUID.randomUUID().toString().replaceAll("-", "").substring(0, 5)
                + vo.getProjectId();
        //创建projectDeviceStatusMap存储项目内设备的调优状态及调优时间
        setProjectRadioOptimizingFlag(vo.getProjectId(), projectDevicesSupportRrm, optimizeResultId, devicesIndexes);
        //将RadioOptimizeParams转为下发到设备的ApmngRrm
        RadioProtocolSet radioProtocolSet = new RadioProtocolSet();
        radioProtocolSet.setMethod("set");
        radioProtocolSet.setApmngRrm(RadioOptimizeParamsAdaptor.toApmngRrm(radioOptimizeInfo));
        Map<String, Object> protocolMap = JsonUtils.json2Map(JsonUtils.bean2Json(radioProtocolSet));
        logger.debug("send to device's message is :" + protocolMap);
        for (Device device : projectDevicesSupportRrm) {
            logger.debug(device.getDeviceId() + protocolMap.toString());
            ApiResult apiResult = passthrough.post(device.getDeviceId(), protocolMap);
            if (Errors.SUCCESS.getErrorCode() != apiResult.getErrorCode()) {
                redissonClient.getMap(RrmConstant.REDIS_KEY_PREFIX_OPTIMIZE_PROJECT_PREFIX
                        + vo.getProjectId()).delete();
                return new ApiResult(apiResult.getErrorCode(), apiResult.getMessage());
            }
        }
        //写入数据库的调优记录表，调优状态为"underway"
        optimizeHistoryDao.save(new RadioOptimizeHistory(vo.getProjectId(), optimizeResultId, context.getCloudUsername()
                , RadioOptimizeType.IMMEDIATELY.toString(), RadioOptimizeStatus.UNDERWAY.toString()
                , Instant.now().toEpochMilli()));
        saveRrmProjectId(vo.getProjectId());
        return new ApiResult(Errors.SUCCESS, new StartRrmVO(RadioOptimizeStatus.UNDERWAY.toString(),
                optimizeResultId));
    }
    
    
    ---------------------------------------------------------------------------------------------------------
        private void updateOptimizeProgress(Long projectId, String deviceMac, String status) {
        String redisKey = Constant.REDIS_KEY_PREFIX_OPTIMIZE_PROJECT_PREFIX + projectId;
        RMap<String, Object> projectDeviceStatusMap = redissonClient.getMap(redisKey);
        if (CollectionUtils.isEmpty(projectDeviceStatusMap)) {
            //当前项目不在射频优化状态
            logger.info("project : " + projectId + " is not in optimizing");
            return;
        }
        Object deviceStatusTimeMap = projectDeviceStatusMap.get(deviceMac);
        if (deviceStatusTimeMap == null) {
            //设备不支持射频同步
            logger.info("device : " + deviceMac + " is not support rrm");
            return;
        }
        logger.debug("project:" + projectId + "update device 's optimize progress device:"
                + deviceMac + ",status:" + status);
        Set deviceStatusSet = ((Map) deviceStatusTimeMap).keySet();
        if (deviceStatusSet.size() != 1) {
            return;
        }
        //拿到旧的状态:状态定义（射频调优开始，射频调优结束，射频拉取结束）
        String oldStatus = (String) deviceStatusSet.iterator().next();
        if (RADIO_OPTIMIZE_STATUS_START.equals(status) && RADIO_OPTIMIZE_STATUS_NOT_START.equals(oldStatus)){
            projectDeviceStatusMap.put(deviceMac, new HashMap<String, Long>().put(RADIO_OPTIMIZE_STATUS_START,
                    Instant.now().toEpochMilli()));
        }
        if (RADIO_OPTIMIZE_STATUS_FINISH.equals(status)) {
            //更新状态并检查是否所有设备都已经完成射频调优
            if (RADIO_OPTIMIZE_STATUS_NOT_START.equals(oldStatus) || RADIO_OPTIMIZE_STATUS_START.equals(oldStatus)) {
                projectDeviceStatusMap.put(deviceMac
                        , new HashMap<String, Long>().put(RADIO_OPTIMIZE_STATUS_FINISH, Instant.now().toEpochMilli()));
            }
        }
        //在收到射频修改消息的时候也判断是否调优完成，完成之后取消任务并生成结果。
        if (RADIO_OPTIMIZE_STATUS_CONFIG_SYNC.equals(status)) {
            //更新状态并检查是否所有设备都已经完成射频拉取
            if (RADIO_OPTIMIZE_STATUS_NOT_START.equals(oldStatus) || RADIO_OPTIMIZE_STATUS_START.equals(oldStatus)
                    || RADIO_OPTIMIZE_STATUS_FINISH.equals(oldStatus)) {
                projectDeviceStatusMap.put(deviceMac
                        , new HashMap<String, Long>().put(RADIO_OPTIMIZE_STATUS_CONFIG_SYNC,
                                Instant.now().toEpochMilli()));
            }
        }
    }
