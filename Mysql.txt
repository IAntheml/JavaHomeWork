public class DeviceDao extends BaseDao<Device> {
    private SqlResultHandle deviceResultHandle = DeviceResultHandle.getInstance();
    private String selectDeviceSql = DeviceResultHandle.getInstance().getSelectDeviceSql();
    @PersistenceContext
    EntityManager entityManager;
    @Autowired
    DeviceRepository deviceRepository;
    @Autowired
    CpeDeviceRepository cpeDeviceRepository;
    @Autowired
    DeviceConfigDao deviceConfigDao;

    public DeviceDao() {
    }

    public void add(Device device) {
        this.deviceRepository.save(device);
    }

    public Session getSession() {
        return (Session)this.entityManager.unwrap(Session.class);
    }

    public long countByDeviceType(String type) {
        return this.countByFilters((List)null, Arrays.asList(new QueryCondition("deviceType", type, QueryType.like)));
    }

    public List<Long> findSiteIdList() {
        Session session = this.getSession();
        String hql = "select distinct d.siteId from com.tplink.ignite.module.nms.resource.domain.bean.Device d";
        Query query = session.createQuery(hql);
        List<Long> ids = query.list();
        return ids;
    }

    public Device findBySiteIdAndMac(final Long siteId, final String deviceMac) {
        String sql = this.selectDeviceSql + "where d.siteId = ? and d.deviceMac = ?";
        List<Device> devices = this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId, deviceMac});
        return CollectionUtils.isEmpty(devices) ? null : (Device)devices.get(0);
    }

    public Long findParentDeviceIndexBySiteIdAndMac(final Long siteId, final String mac) {
        Session session = this.getSession();
        String hql = "select d.id from com.tplink.ignite.module.nms.resource.domain.bean.Device d where d.siteId = :siteId and d.deviceMac = :deviceMac and d.belongDevice is null";
        Query query = session.createQuery(hql);
        query.setParameter("siteId", siteId);
        query.setParameter("deviceMac", mac);
        List<Long> ids = query.list();
        return CollectionUtils.isEmpty(ids) ? null : (Long)ids.get(0);
    }

    public Device findBySiteIdAndMacAndBelongMac(final Long siteId, final String deviceMac, final String belongDeviceMac) {
        Long belongDeviceIndex = null;
        if (!StringUtils.isEmpty(belongDeviceMac)) {
            belongDeviceIndex = this.findParentDeviceIndexBySiteIdAndMac(siteId, belongDeviceMac);
            if (belongDeviceIndex == null) {
                return null;
            }
        }

        String sql = this.selectDeviceSql;
        sql = sql + "where d.siteId = ? and d.deviceMac = ? and ";
        if (StringUtils.isEmpty(belongDeviceMac)) {
            sql = sql + "d.belongDevice is null";
        } else {
            sql = sql + "d.belongDevice = ?";
        }

        List<Object> params = new ArrayList();
        params.add(siteId);
        params.add(deviceMac);
        if (!StringUtils.isEmpty(belongDeviceMac)) {
            params.add(belongDeviceIndex);
        }

        List<Device> devices = this.findBySql(this.entityManager, sql, this.deviceResultHandle, params.toArray());
        return CollectionUtils.isEmpty(devices) ? null : (Device)devices.get(0);
    }

    public Long findDeviceIndexBySiteIdAndDeviceId(final Long siteId, final String deviceId) {
        Session session = this.getSession();
        String hql = "select d.id from com.tplink.ignite.module.nms.resource.domain.bean.Device d where d.siteId = :siteId and d.deviceId = :deviceId";
        Query query = session.createQuery(hql);
        query.setParameter("siteId", siteId);
        query.setParameter("deviceId", deviceId);
        List<Long> indexList = query.list();
        return CollectionUtils.isEmpty(indexList) ? null : (Long)indexList.get(0);
    }

    public List<Long> findDeviceIndexBySiteIdAndBelongDevice(final Long siteId, final Long belongDeviceIndex) {
        String hql = "select distinct d.id from com.tplink.ignite.module.nms.resource.domain.bean.Device d where d.belongDevice = :belongDeviceIndex and d.siteId = :siteId";
        return this.getSession().createQuery(hql).setParameter("belongDeviceIndex", belongDeviceIndex).setParameter("siteId", siteId).list();
    }

    public List<Long> findDeviceGroupBySiteIdAndBelongDevice(final Long siteId, final Long belongDevice) {
        Session session = this.getSession();
        String hql = "select distinct d.group from com.tplink.ignite.module.nms.resource.domain.bean.Device d where d.belongDevice = :belongDevice and d.siteId = :siteId";
        Query query = session.createQuery(hql);
        query.setParameter("belongDevice", belongDevice);
        query.setParameter("siteId", siteId);
        List<Long> groupIds = query.list();
        return groupIds;
    }

    public List<Device> findBySiteIdAndGroupIdAndBelongDevice(Long siteId, Long groupId, Long belongDevice) {
        String sql = this.selectDeviceSql + "where d.siteId = ? and d.deviceGroup = ? and d.belongDevice = ?";
        return this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId, groupId, belongDevice});
    }

    public List<Device> findBySiteId(Long siteId) {
        String sql = this.selectDeviceSql + "where d.siteId = ?";
        return this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId});
    }

    public List<Device> findBySiteIdAndDeviceMac(Long siteId, String deviceMac) {
        String sql = this.selectDeviceSql + "where d.siteId = ? and deviceMac = ?";
        return this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId, deviceMac});
    }

    public List<Device> findBySiteIdAndDeviceMacIn(Long siteId, List<String> deviceMacs) {
        String hql = this.selectDeviceSql + "where d.siteId = (:siteId) and d.deviceMac in (:deviceMacs)";
        Session session = this.getSession();
        List<Device> allDevice = new ArrayList();
        List<List<String>> macGroups = DeviceUtil.split(deviceMacs, 500);
        if (!CollectionUtils.isEmpty(macGroups)) {
            Iterator var7 = macGroups.iterator();

            while(var7.hasNext()) {
                List<String> macGroup = (List)var7.next();
                Query query = session.createSQLQuery(hql);
                query.setParameterList("deviceMacs", macGroup);
                query.setParameter("siteId", siteId);
                List devices = query.list();
                allDevice.addAll(this.deviceResultHandle.handleSqlResult(devices));
            }
        }

        return allDevice;
    }

    public List<Device> findAllBySiteIdAndStatus(Long siteId, Integer status) {
        String sql = this.selectDeviceSql + "where d.siteId = ? and d.status = ?";
        return this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId, status});
    }

    public List<Device> findAllBySiteIdAndStatusIn(Long siteId, List<Integer> statusList) {
        return this.deviceRepository.findAllBySiteIdAndStatusIn(siteId, statusList);
    }

    public List<Device> findAllBySiteIdAndDeviceMacIn(Long projectId, List<String> macList) {
        return this.deviceRepository.findAllBySiteIdAndDeviceMacIn(projectId, macList);
    }

    public List<Device> findAllByDeviceMacIn(List<String> macList) {
        return this.deviceRepository.findAllByDeviceMacIn(macList);
    }

    public List<String> findDeviceMacByDeviceStatusAndDeviceMacIn(Integer deviceStatus, List<String> deviceMacs) {
        Session session = this.getSession();
        String hql = "select distinct d.deviceMac from com.tplink.ignite.module.nms.resource.domain.bean.Device d where d.status = (:status) and d.deviceMac in (:deviceMacs)";
        Query query = session.createQuery(hql);
        query.setParameter("status", deviceStatus);
        query.setParameterList("deviceMacs", deviceMacs);
        List<String> deviceMacList = query.list();
        return deviceMacList;
    }

    public List<String> findDeviceMacByDeviceMacIn(List<String> deviceMacs) {
        Session session = this.getSession();
        String hql = "select distinct d.deviceMac from com.tplink.ignite.module.nms.resource.domain.bean.Device d where d.deviceMac in (:deviceMacs)";
        Query query = session.createQuery(hql);
        query.setParameterList("deviceMacs", deviceMacs);
        List<String> deviceMacList = query.list();
        return deviceMacList;
    }

    public List<Device> findBySiteIdAndGroupId(Long siteId, Long groupId) {
        String sql = this.selectDeviceSql + "where d.siteId = ? and d.deviceGroup = ?";
        return this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId, groupId});
    }

    public Device findBySiteIdAndDeviceIndex(Long siteId, Long deviceIndex) {
        String sql = this.selectDeviceSql + "where d.siteId = ? and d.id = ?";
        List<Device> devices = this.findBySql(this.entityManager, sql, this.deviceResultHandle, new Object[]{siteId, deviceIndex});
        return CollectionUtils.isEmpty(devices) ? null : (Device)devices.get(0);
    }

    public List<Device> findBySiteIdAndDeviceIndex(final Long siteId, final List<Long> deviceIndex) {
        String hql = this.selectDeviceSql + "where d.id in (:idList) and d.siteId = (:siteId)";
        Session session = this.getSession();
        List<Device> allDevice = new ArrayList();
        List<List<Long>> idGroups = DeviceUtil.splitLongList(deviceIndex, 500);
        if (!CollectionUtils.isEmpty(idGroups)) {
            Iterator var7 = idGroups.iterator();

            while(var7.hasNext()) {
                List<Long> idGroup = (List)var7.next();
                Query query = session.createSQLQuery(hql);
                query.setParameterList("idList", idGroup);
                query.setParameter("siteId", siteId);
                List devices = query.list();
                allDevice.addAll(this.deviceResultHandle.handleSqlResult(devices));
            }
        }

        return allDevice;
    }
