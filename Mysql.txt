public class RrmTimingScheduledConfig implements SchedulingConfigurer {

    private ScheduledTaskRegistrar regis;

    @Autowired
    private RadioOptimizeParamsRepository radioOptimizeParamsDao;

    private static final ThreadPoolExecutor POLLING_RRM_START_THREAD_POOL = new ScheduledThreadPoolExecutor(1,
            new BasicThreadFactory.Builder().namingPattern("rrm-scheduled-pool-%d").daemon(true).build());

    private final ConcurrentHashMap<Long, CronTask> projectTaskMap = new ConcurrentHashMap<>();

    @Override
    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {
        scheduledTaskRegistrar.setScheduler(POLLING_RRM_START_THREAD_POOL);
        buildTask(scheduledTaskRegistrar);
        this.regis = scheduledTaskRegistrar;
    }

    public void refresh(Long projectId) {
        RadioOptimizeInfo updatedInfo = radioOptimizeParamsDao.findByProjectId(projectId);
        String cronExpression = getCronExpression(updatedInfo);
        if (cronExpression == null) {
            projectTaskMap.remove(projectId);
        } else {
            projectTaskMap.replace(projectId, new CronTask(new RrmTimingExecutorTask(projectId), cronExpression));
        }
        regis.setCronTasksList(new ArrayList<>(projectTaskMap.values()));
    }

    @PreDestroy
    public void destroy() {
        this.regis.destroy();
    }

    private void buildTask(ScheduledTaskRegistrar scheduledTaskRegistrar) {
        Iterable<RadioOptimizeInfo> all = radioOptimizeParamsDao.findAll();
        for (RadioOptimizeInfo optimizeParams : all) {
            if ("on".equals(optimizeParams.getTimingOptimizeEnable())) {
                String cronExpression = getCronExpression(optimizeParams);
                if (cronExpression == null) {
                    return;
                }
                projectTaskMap.put(optimizeParams.getProjectId(),
                        new CronTask(new RrmTimingExecutorTask(optimizeParams.getProjectId()), cronExpression));
            }
        }
        scheduledTaskRegistrar.setCronTasksList(new ArrayList<>(projectTaskMap.values()));
    }

    private String getCronExpression(RadioOptimizeInfo optimizeParams) {
        int minStartTime = 0;
        int maxStartTime = 60;
        int validStartTimeSpilt = 3;
        int repeatEveSpilt = 7;
        int validRepeatSpiltMax = 7;
        int validRepeatSpiltMin = 1;
        if (optimizeParams == null) {
            return null;
        }
        String startTime = optimizeParams.getStartTime();
        String repeatDate = optimizeParams.getRepeatDate();
        String[] split = startTime.split(":");
        //[1,2,3] 08:08:08 "[1,2,3]"
        //10 10 2 ? ? 1,2,3,4,5,6 *
        if (split.length != validStartTimeSpilt) {
            return null;
        }
        int hour = Integer.parseInt(split[0]);
        int minute = Integer.parseInt(split[1]);
        int second = Integer.parseInt(split[2]);
        if (hour >= maxStartTime || hour <= minStartTime || minute >= maxStartTime || minute <= minStartTime
                || second >= maxStartTime || second <= minStartTime) {
            return null;
        }
        String repeatDateSubstring = repeatDate.substring(repeatDate.indexOf('[') + 1, repeatDate.lastIndexOf(']'));
        String[] repeatDateSubstringArrays = repeatDateSubstring.split(",");
        StringBuilder repeat = new StringBuilder();
        if (repeatDateSubstringArrays.length > repeatEveSpilt || repeatDateSubstringArrays.length <= 0) {
            return null;
        }
        for (String s : repeatDateSubstringArrays) {
            if (Integer.parseInt(s) > validRepeatSpiltMax || Integer.parseInt(s) < validRepeatSpiltMin) {
                return null;
            }
        }
        if (repeatDateSubstringArrays.length == repeatEveSpilt) {
            repeat = new StringBuilder("*");
        } else {
            for (String s : repeatDateSubstringArrays) {
                repeat.append(s).append(" ");
            }
        }
        String cron = second + " " + minute + " " + hour + " " + "? " + "* " + repeat;
        if (!CronExpression.isValidExpression(cron)) {
            return null;
        }
        return cron;
    }
}

---------------------------------------------------------------2021.1.26------------------------------------------------------------------------------
create database device_manager;
use device_manager;
create table `device`(
	`device_id` varchar(45) not null,
    `device_name` varchar(45) default null,
    `alias` varchar(45) default null,
    `online` varchar(1) default null,
    `firmware_id` varchar(64) default null,
    `model_id` int(11) default null,
    `account_id` int(11) default null,
    `location_id` varchar(16) default null,
    `wan_info` varchar(200) default null,
    `lan_info` varchar(100) default null,
    `wifi_basic` varchar(100) default null,
    `ip_address` varchar(50) default null,
    `version` int(11) default '0',
    `region` varchar(45) default null,
    primary key(`device_id`) using btree
    )ENGINE=MyISAM Default CHARSET=utf8;
    
    
    package com.tplink.ignite.module.nms.wireless.domain.bean.bean;


import com.tplink.ignite.module.nms.resource.domain.bean.Device;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;


/**
 * Copyright (C) 2017 TP-LINK Technologies Co., Ltd. All rights reserved
 * Author: dongxinwei
 * Date: 2017-09-13
 * Description:
 */
@Entity
@Table(name = "cwm_config_radio")
public class Radio {

    //Long projectId, String optimizeResultId, String radioUnit, String radioChannel, int deviceAmount
    @Id
    @Column(name = "radioId")
    private Long radioId;
    @Column(name = "siteId", updatable = false)
    private Long siteId;
    @Column(name = "deviceIndex", updatable = false)
    private Long deviceIndex;
    @Column(name = "radioEnable")
    private String radioEnable;
    @Column(name = "radioUnit", updatable = false)
    private String radioUnit;
    @Column(name = "radioMode")
    private String radioMode;
    @Column(name = "radioChannel")
    private String radioChannel;
    @Column(name = "radioBandwidth")
    private String radioBandwidth;
    @Column(name = "radioPower")
    private String radioPower;
    @Column(name = "maxClientsCount")
    private Integer maxClientsCount;
    @Column(name = "reserve1")
    private String deviceRadioId;

    @Transient
    private Device device;

    public Long getRadioId() {
        return radioId;
    }

    public void setRadioId(Long radioId) {
        this.radioId = radioId;
    }

    public Long getSiteId() {
        return siteId;
    }

    public void setSiteId(Long siteId) {
        this.siteId = siteId;
    }

    public Device getDevice() {
        return device;
    }

    public void setDevice(Device device) {
        this.device = device;
    }

    public String getRadioEnable() {
        return radioEnable;
    }

    public void setRadioEnable(String radioEnable) {
        this.radioEnable = radioEnable;
    }

    public String getRadioUnit() {
        return radioUnit;
    }

    public void setRadioUnit(String radioUnit) {
        this.radioUnit = radioUnit;
    }

    public String getRadioMode() {
        return radioMode;
    }

    public void setRadioMode(String radioMode) {
        this.radioMode = radioMode;
    }

    public String getRadioChannel() {
        return radioChannel;
    }

    public void setRadioChannel(String radioChannel) {
        this.radioChannel = radioChannel;
    }

    public String getRadioBandwidth() {
        return radioBandwidth;
    }

    public void setRadioBandwidth(String radioBandwidth) {
        this.radioBandwidth = radioBandwidth;
    }

    public String getRadioPower() {
        return radioPower;
    }

    public void setRadioPower(String radioPower) {
        this.radioPower = radioPower;
    }

    public Integer getMaxClientsCount() {
        return maxClientsCount;
    }

    public void setMaxClientsCount(Integer maxClientsCount) {
        this.maxClientsCount = maxClientsCount;
    }

    public String getDeviceName() {
        return device != null ? device.getDeviceName() : null;
    }

    public Long getDeviceIndex() {
        return deviceIndex;
    }

    public void setDeviceIndex(Long deviceIndex) {
        this.deviceIndex = deviceIndex;
    }

    public String getDeviceRadioId() {
        return deviceRadioId;
    }

    public void setDeviceRadioId(String deviceRadioId) {
        this.deviceRadioId = deviceRadioId;
    }
}

CREATE TABLE `cwm_config_radio` (
  `radioId` BIGINT(20) NOT NULL,
  `siteId` BIGINT(20) NOT NULL,
  `deviceIndex` BIGINT(20) NOT NULL,
  `radioEnable` VARCHAR(5) NOT NULL,
  `radioUnit` VARCHAR(10) NOT NULL,
  `radioMode` VARCHAR(32) DEFAULT NULL,
  `radioChannel` VARCHAR(5) DEFAULT NULL,
  `radioBandwidth` VARCHAR(10) DEFAULT NULL,
  `radioPower` VARCHAR(5) NOT NULL,
  `maxClientsCount` INT(11) DEFAULT NULL,
  `radioInfo` VARCHAR(1000) DEFAULT NULL,
  `version` TINYINT(4) DEFAULT NULL,
  `reserve1` VARCHAR(255) DEFAULT NULL,
  `reserve2` INT(11) DEFAULT NULL,
  PRIMARY KEY (`radioId`),
  UNIQUE KEY `device_unit_idx` (`deviceIndex`,`radioUnit`),
  KEY `site_idx` (`siteId`)
)
111
